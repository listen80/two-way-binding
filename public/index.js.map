{"version":3,"file":"index.js","sources":["../src/directives/DirectiveHandler.js","../src/reactivity/Dep.js","../src/reactivity/Watcher.js","../src/utils/Updater.js","../src/nodes/NodeCompiler.js","../src/directives/DirectiveUtils.js","../src/events/EventBinder.js","../src/nodes/htmlParse.js","../src/core/Observe.js","../src/utils/get.js","../src/core/Binding.js","../src/core/Compile.js"],"sourcesContent":["\r\n/**\r\n * 处理 `model` 指令，实现双向数据绑定\r\n * @param {HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement} node - 要处理的表单元素\r\n * @param {object} vm - 视图模型实例\r\n * @param {string} exp - 表达式\r\n */\r\n// 定义特殊输入类型的数组，这些类型在处理 model 指令时会有特定逻辑\r\nconst specialTypes = [\r\n    'checkbox', 'radio', 'select', 'file'\r\n];\r\n\r\nconst inputTypes = [\r\n    'text', 'password', 'email', 'tel', 'url', 'number', 'range', 'date', 'datetime-local', 'month', 'week', 'time', 'color', 'search', 'image', 'textarea',\r\n    'select-multiple', 'select-one', 'select'\r\n]\r\n\r\nexport const directiveHandler = (node, vm, exp, dir) => {\r\n    directiveHandlerFuncs[dir]?.(node, vm, exp);\r\n}\r\n\r\n// 导出指令对象，包含 model 和 if 指令的处理函数\r\nexport const directiveHandlerFuncs = {\r\n    /**\r\n     * 处理 model 指令，实现表单元素与视图模型数据的双向绑定\r\n     * @param {HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement} node - 要处理的表单元素\r\n     * @param {object} vm - 视图模型实例\r\n     * @param {string} exp - 表达式，用于指定视图模型中的数据属性\r\n     */\r\n    model(node, vm, exp) {\r\n        // 调用 update 函数更新节点，传入节点、视图模型、表达式和指令类型\r\n        // update(node, vm, exp, 'model');\r\n\r\n        // 如果节点类型属于特殊类型，监听 change 事件\r\n        if (inputTypes.includes(node.type)) {\r\n            node.addEventListener('input', (e) => {\r\n                // 当输入事件触发时，将表单元素的当前值赋值给视图模型中的对应属性\r\n                vm[exp] = e.target.value;\r\n            });\r\n        } else if (specialTypes.includes(node.type)) {\r\n            node.addEventListener('change', (e) => {\r\n                // 当事件触发时，将表单元素的 value 属性值赋值给视图模型中的对应属性\r\n                debugger\r\n                vm[exp] = e.target.attributes.value.value;\r\n            });\r\n        }\r\n        // 如果节点类型为 text，监听 input 事件\r\n\r\n        // 处理不支持的输入类型，输出警告信息\r\n        else {\r\n            console.warn(`Unsupported input type: ${node.type}`);\r\n        }\r\n    },\r\n    /**\r\n     * 处理 if 指令，根据表达式的值决定节点的显示与隐藏\r\n     * @param {HTMLElement} node - 要处理的节点\r\n     * @param {object} vm - 视图模型实例\r\n     * @param {string} exp - 表达式，用于判断节点是否显示\r\n     */\r\n    if(node, vm, exp) {\r\n        node.parentNode.__if__ = node;\r\n    },\r\n    for(node, vm, exp) {\r\n        for (let i = 0; i < Number(exp); i++) {\r\n            node.parentNode.appendChild(node.cloneNode(true));\r\n        }\r\n    }\r\n}","// 依赖收集器\r\nclass Dep {\r\n    constructor() {\r\n        this.subs = [];\r\n    }\r\n\r\n    addSub(sub) {\r\n        this.subs.push(sub);\r\n    }\r\n\r\n    notify() {\r\n        this.subs.forEach(sub => sub.update());\r\n    }\r\n}\r\n\r\nDep.target = null;\r\n\r\nexport default Dep;","import Dep from './Dep.js';\r\n\r\n// 观察者\r\nclass Watcher {\r\n    constructor(vm, expOrFn, cb) {\r\n        this.vm = vm;\r\n        this.expOrFn = expOrFn;\r\n        this.cb = cb;\r\n        this.value = this.get();\r\n    }\r\n\r\n    get() {\r\n        Dep.target = this;\r\n        const value = this.vm[this.expOrFn];\r\n        Dep.target = null;\r\n        return value;\r\n    }\r\n\r\n    update() {\r\n        console.log('update', this);\r\n        const oldValue = this.value;\r\n        this.value = this.vm[this.expOrFn];\r\n        this.cb.call(this.vm, this.value, oldValue);\r\n    }\r\n}\r\n\r\nexport default Watcher;","// 该引用可能需要调整，Watcher.js 在 reactivity 目录下\r\nimport Watcher from '../reactivity/Watcher.js';\r\n\r\n/**\r\n * 更新节点内容并添加观察者\r\n * @param {Node} node - 要更新的节点\r\n * @param {object} vm - 视图模型实例\r\n * @param {string|function} exp - 表达式或更新函数\r\n * @param {string} dir - 指令类型\r\n * @param {string} [attr] - 属性名（可选）\r\n */\r\n// 此函数的作用是更新节点内容，并且为节点添加观察者\r\n// 当数据发生变化时，观察者会触发回调函数来更新节点\r\nexport function update(node, vm, exp, dir, attr) {\r\n    // 根据 exp 的类型确定更新函数\r\n    const updaterFn = updaters[`${dir}`];\r\n    if (updaterFn) {\r\n        // 调用更新函数更新节点内容\r\n        updaterFn(node, vm[exp], attr);\r\n        new Watcher(vm, exp, (value, oldValue) => {\r\n            console.log('更新了', oldValue);\r\n            // 数据变化时调用更新函数更新节点\r\n            updaterFn(node, value, attr);\r\n        });\r\n    }\r\n    // 创建一个新的观察者，当数据变化时触发回调更新节点\r\n}\r\n\r\n// 定义各种更新函数的对象\r\nconst updaters = {\r\n    /**\r\n     * 更新元素属性值\r\n     * @param {HTMLElement} node - 要更新的元素节点\r\n     * @param {any} value - 新的属性值\r\n     * @param {string} attr - 属性名\r\n     */\r\n    // 此函数用于更新元素的指定属性值\r\n    attribute(node, value, attr) {\r\n        // 调用元素的 setAttribute 方法设置属性值\r\n        node.setAttribute(attr, value || '');\r\n    },\r\n    /**\r\n     * 更新文本节点内容\r\n     * @param {Text} node - 要更新的文本节点\r\n     * @param {any} value - 新的文本内容\r\n     */\r\n    // 此函数用于更新文本节点的内容\r\n    text(node, value) {\r\n        // 设置文本节点的文本内容\r\n        node.textContent = value;\r\n    },\r\n    /**\r\n     * 更新表单元素的值\r\n     * @param {HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement} node - 要更新的表单元素\r\n     * @param {any} value - 新的值\r\n     */\r\n    // 此函数用于更新表单元素的值\r\n    model(node, value) {\r\n        // 设置表单元素的值\r\n        node.value = value;\r\n    },\r\n    // 此函数用于根据条件显示或隐藏节点\r\n    if(node, value) {\r\n        if (value) {\r\n            node.parentNode.replaceChild(node.parentNode.__if__, node);\r\n        } else {\r\n            node.remove();\r\n        }\r\n    },\r\n    show(node, value) {\r\n        value ? node.style.display = 'block' : node.style.display = 'none';\r\n    }\r\n}\r\n","import { isDirective, isEventDirective, isAttributDirective } from '../directives/DirectiveUtils.js';\r\nimport { eventHandler } from '../events/EventBinder.js';\r\nimport { directiveHandler } from '../directives/DirectiveHandler.js';\r\nimport Binding from '../core/Binding.js';\r\nimport { update } from '../utils/Updater.js';\r\n/**\r\n * 将 DOM 元素转换为文档片段\r\n * @param {HTMLElement} el - 要转换的 DOM 元素\r\n * @returns {DocumentFragment} - 转换后的文档片段\r\n/**\r\n * 编译文档片段或 DOM 节点\r\n * @param {Node} el - 要编译的节点\r\n * @param {object} vm - 视图模型实例\r\n */\r\nexport function compilerNode(el, vm, methods, components) {\r\n    const childNodes = el.childNodes;\r\n\r\n    Array.from(childNodes).forEach(node => {\r\n        if (node.nodeType === 1) {\r\n            if (node.tagName.includes('-')) {\r\n                // console.log(node.tagName)\r\n                const comment = document.createComment('');\r\n                node.replaceWith(comment)\r\n                try {\r\n                    const component = node.tagName.toLowerCase();\r\n                    new Binding({ component: components[component], el: comment })\r\n\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            } else {\r\n                compileElement(node, vm, methods, components);\r\n\r\n            }\r\n        } else if (node.nodeType === 3) {\r\n            compileText(node, vm);\r\n        }\r\n        if (node.childNodes && node.childNodes.length) {\r\n            compilerNode(node, vm, methods, components);\r\n\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * 编译元素节点，处理元素的属性\r\n * @param {HTMLElement} node - 要编译的元素节点\r\n * @param {object} vm - 视图模型实例\r\n */\r\nexport function compileElement(node, vm, methods) {\r\n\r\n    const attrs = node.attributes;\r\n    Array.from(attrs).forEach(attr => {\r\n        const attrName = attr.name;\r\n        const exp = attr.value;\r\n        const dir = attrName.substring(1);\r\n        if (isDirective(attrName)) {\r\n            directiveHandler(node, vm, exp, dir)\r\n            update(node, vm, exp, dir);\r\n        } else if (isAttributDirective(attrName)) {\r\n            update(node, vm, exp, 'attribute', dir);\r\n        } else if (isEventDirective(attrName)) {\r\n            eventHandler(node, vm, exp, dir, methods);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * 编译文本节点，处理文本中的插值表达式\r\n * @param {Text} node - 要编译的文本节点\r\n * @param {object} vm - 视图模型实例\r\n */\r\nexport function compileText(node, vm) {\r\n    const reg = /\\{\\{(.*)\\}\\}/;\r\n    const text = node.textContent;\r\n    if (reg.test(text)) {\r\n        const exp = RegExp.$1.trim();\r\n        update(node, vm, exp, 'text');\r\n    }\r\n}","\r\n/**\r\n * 判断属性是否为数据指令\r\n * @param {string} attr - 属性名\r\n * @returns {boolean} - 是否为数据指令\r\n */\r\nexport function isAttributDirective(attr) {\r\n    return attr.indexOf(':') === 0;\r\n}\r\n\r\n/**\r\n * 判断属性是否为自定义指令\r\n * @param {string} attr - 属性名\r\n * @returns {boolean} - 是否为自定义指令\r\n */\r\nexport function isDirective(attr) {\r\n    return attr.indexOf('$') === 0;\r\n}\r\n\r\n/**\r\n * 判断属性是否为事件指令\r\n * @param {string} attr - 属性名\r\n * @returns {boolean} - 是否为事件指令\r\n */\r\nexport function isEventDirective(attr) {\r\n    return attr.indexOf('@') === 0;\r\n}\r\n\r\n","/**\r\n * 处理事件指令，为元素添加事件监听器\r\n * @param {HTMLElement} node - 要添加事件监听器的元素节点\r\n * @param {object} vm - 视图模型实例\r\n * @param {string} exp - 方法名\r\n * @param {string} dir - 事件类型\r\n */\r\nexport function eventHandler(node, vm, exp, dir, methods) {\r\n    const fn = methods[exp];\r\n    if (fn && dir) {\r\n        node.addEventListener(dir, fn.bind(vm));\r\n    }\r\n}","\r\nconst parser = new DOMParser();\r\n\r\nexport default (template) => {\r\n    const body = parser.parseFromString(`<body>${template}</body>`, 'text/html').querySelector('body');\r\n    return {\r\n        template:body.querySelector('template')?.content,\r\n        script: body.querySelector('script'),\r\n        style: body.querySelector('style'),\r\n    }\r\n};\r\n","import Dep from '../reactivity/Dep.js';\r\n\r\nfunction defineReactive(obj, key, val) {\r\n    const dep = new Dep();\r\n    observe(val); // 递归处理嵌套对象\r\n    Object.defineProperty(obj, key, { enumerable: true, configurable: true, get() {\r\n            if (Dep.target) {\r\n                dep.addSub(Dep.target);\r\n            }\r\n            return val;\r\n        }, set(newVal) {\r\n            if (newVal === val) {\r\n                return;\r\n            }\r\n            val = newVal;\r\n            dep.notify(); // 触发更新\r\n        }\r\n    });\r\n}\r\n\r\nfunction observe(data) {\r\n    if (!data || typeof data !== 'object') {\r\n        return;\r\n    }\r\n    Object.keys(data).forEach(key => {\r\n        defineReactive(data, key, data[key]);\r\n    });\r\n}\r\n\r\n// 假设 defineReactive 函数在 Vue.js 中，这里需要导入或者重新定义\r\n// 暂时先假设已经导入，实际使用时需要处理\r\n\r\nexport default observe;","import DOMParser from '../nodes/htmlParse.js';\r\n\r\nexport function loadComponent(url) {\r\n    const result = syncXmlHttpRequest(url)\r\n    return DOMParser(result);\r\n}\r\n\r\nexport function syncXmlHttpRequest(url) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, false); // 第三个参数设为 false 表示同步请求\r\n    xhr.send(null);\r\n    if (xhr.status === 200) {\r\n        return xhr.responseText;\r\n    } else {\r\n        throw new Error(`请求失败，状态码: ${xhr.status}`);\r\n    }\r\n}\r\n","\r\nimport compile from './Compile.js';\r\nimport observe from './Observe.js';\r\nimport { loadComponent } from '../utils/get.js';\r\n\r\nexport default class Binding {\r\n    constructor({ component, el, props = {} }) {\r\n\r\n        if (!component) {\r\n            throw new Error('component is required');\r\n        }\r\n        if (typeof component === 'string') {\r\n            component = loadComponent(component)\r\n        }\r\n\r\n        const { script, template, style } = component\r\n        // 1. 获取的ES6代码是模\r\n        const es6ModuleCode = script.textContent;\r\n\r\n        // 2. 将代码转为blob URL（模拟模块文件）\r\n        const blob = new Blob([es6ModuleCode], { type: 'text/javascript' });\r\n        const url = URL.createObjectURL(blob);\r\n        // 动态import 默认是异步的，无法直接同步执行。若要实现类似同步的效果，可以使用 async/await 语法，但需在 async 函数环境中使用。\r\n\r\n        // 3. 用动态import()加载该模块\r\n        import(url).then(module => {\r\n            document.body.append(style)\r\n            // console.log(module.default); // 输出 'ES6 Module'\r\n            const data = module.default.data || {};\r\n            const methods = module.default.methods || {};\r\n            const components = module.default.components || {};\r\n            Object.assign(this, props, data);\r\n            observe(this);\r\n            // this.data = data\r\n            compile(template, this, methods, components);\r\n            // 终于明白这里为什么是replace\r\n            el.replaceWith(template)\r\n        }).catch(err => {\r\n            console.error('加载模块失败', err);\r\n        });\r\n        // this.$el = document.querySelector(options.el);\r\n        // // 对数据进行响应式处理\r\n        // // 编译模板\r\n    }\r\n};","import { node2Fragment } from '../nodes/NodeConverter.js';\r\nimport { compilerNode } from '../nodes/NodeCompiler.js';\r\nimport parserHTML from '../nodes/htmlParse.js';\r\n\r\n/**\r\n * 构造函数，初始化编译器\r\n * @param {string|HTMLElement} el - 要编译的 DOM 元素或选择器\r\n * @param {object} vm - 视图模型实例\r\n */\r\nexport default function compile(template, vm, methods, components) {\r\n\r\n    // let $fragment = node2Fragment(el);\r\n    // debugger\r\n    compilerNode(template, vm, methods, components);\r\n\r\n    // el.appendChild(json);\r\n}\r\n"],"names":["specialTypes","inputTypes","directiveHandlerFuncs","model","node","vm","exp","includes","type","addEventListener","e","target","value","attributes","console","warn","if","parentNode","__if__","for","i","Number","appendChild","cloneNode","Dep","constructor","this","subs","addSub","sub","push","notify","forEach","update","Watcher","expOrFn","cb","get","log","oldValue","call","dir","attr","updaterFn","updaters","attribute","setAttribute","text","textContent","replaceChild","remove","show","style","display","compilerNode","el","methods","components","childNodes","Array","from","nodeType","tagName","comment","document","createComment","replaceWith","component","toLowerCase","Binding","error","attrs","attrName","name","substring","indexOf","isDirective","isAttributDirective","isEventDirective","fn","bind","eventHandler","directiveHandler","compileElement","reg","test","RegExp","$1","trim","compileText","length","parser","DOMParser","observe","data","Object","keys","key","obj","val","dep","defineProperty","enumerable","configurable","set","newVal","defineReactive","loadComponent","url","result","xhr","XMLHttpRequest","open","send","status","responseText","Error","syncXmlHttpRequest","template","body","parseFromString","querySelector","content","script","props","es6ModuleCode","blob","Blob","URL","createObjectURL","import","then","module","append","default","assign","compile","catch","err"],"mappings":"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"}